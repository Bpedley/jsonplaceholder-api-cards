{"version":3,"sources":["components/Card/Card.js","components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Card","cards","Fragment","map","item","key","id","className","src","url","alt","title","Cards","props","fetchData","setState","isLoading","fetch","state","start","then","response","json","data","showMore","this","length","onClick","disabled","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAqBeA,MAlBf,YAA0B,IAAVC,EAAS,EAATA,MACd,OACE,kBAAC,IAAMC,SAAP,KACGD,EAAME,KAAI,SAAAC,GACT,OACE,yBAAKC,IAAKD,EAAKE,GAAIC,UAAU,QAC3B,yBAAKC,IAAKJ,EAAKK,IAAKC,IAAG,UAAKN,EAAKO,SACjC,yBAAKJ,UAAU,aACb,2BAAIH,EAAKO,OACT,sCAAYP,EAAKE,WCsDhBM,G,wBA5Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACV,EAAKC,SAAS,CAAEC,WAAW,IAC3BC,MAAM,mGAAD,OACgG,EAAKC,MAAMC,QAE7GC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKR,SAAS,CACZd,MAAM,GAAD,mBAAM,EAAKiB,MAAMjB,OAAjB,YAA2BsB,IAChCP,WAAW,QAtBA,EA2BnBQ,SAAW,WACT,EAAKT,SACH,CACEI,OAAQ,EAAKD,MAAMC,MAAQ,KAE7B,WACE,EAAKL,gBA/BT,EAAKI,MAAQ,CACXjB,MAAO,GACPe,WAAW,EACXG,MAAO,GALQ,E,iFAUjBM,KAAKX,c,+BA4BG,IAAD,EACsBW,KAAKP,MAA1BjB,EADD,EACCA,MAAOe,EADR,EACQA,UAEf,OAAIA,IAAcf,EAAMyB,OACf,4GAIP,kBAAC,IAAMxB,SAAP,KACE,yIACA,yGAAmBD,EAAMyB,QACzB,yBAAKnB,UAAU,QACb,kBAAC,EAAD,CAAMN,MAAOA,KAEf,4BAAQ0B,QAASF,KAAKD,SAAUI,SAAUZ,GAA1C,sEACeA,GAAa,uBAAGT,UAAU,gC,GAtD7BsB,c,MCOLC,MARf,WACE,OACE,yBAAKvB,UAAU,WACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.5cfa3a89.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nfunction Card({ cards }) {\r\n  return (\r\n    <React.Fragment>\r\n      {cards.map(item => {\r\n        return (\r\n          <div key={item.id} className=\"card\">\r\n            <img src={item.url} alt={`${item.title}`} />\r\n            <div className=\"card-info\">\r\n              <p>{item.title}</p>\r\n              <small>Id: {item.id}</small>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./Cards.css\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nclass Cards extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: [],\r\n      isLoading: false,\r\n      start: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = () => {\r\n    this.setState({ isLoading: true });\r\n    fetch(\r\n      `https://cors-anywhere.herokuapp.com/http://jsonplaceholder.typicode.com/photos?_limit=20&_start=${this.state.start}`\r\n    )\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          cards: [...this.state.cards, ...data],\r\n          isLoading: false\r\n        })\r\n      );\r\n  };\r\n\r\n  showMore = () => {\r\n    this.setState(\r\n      {\r\n        start: +this.state.start + 20\r\n      },\r\n      () => {\r\n        this.fetchData();\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { cards, isLoading } = this.state;\r\n\r\n    if (isLoading && !cards.length) {\r\n      return <h1>Идёт загрузка...</h1>;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Вывод данных в цикле</h1>\r\n        <p>Всего записей: {cards.length}</p>\r\n        <div className=\"grid\">\r\n          <Card cards={cards} />\r\n        </div>\r\n        <button onClick={this.showMore} disabled={isLoading}>\r\n          Показать еще{isLoading && <i className=\"fa fa-spinner fa-spin\"></i>}\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\nimport Cards from \"./components/Cards/Cards\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}